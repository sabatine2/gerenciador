package com.midiasocial.view;


import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class TwitterItemView extends CustomComponent {

	private HorizontalLayout mainLayout;
	private VerticalLayout verticalLayoutInterno;
	private TextArea textAreaTexto;
	private HorizontalLayout horizontalLayoutNomeHora;
	private Label labelHora;
	private Label labelNome;
	private Embedded embeddedImagem;

	public TwitterItemView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("700px");
		mainLayout.setHeight("60px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("700px");
		setHeight("60px");
		
		// embeddedImagem
		embeddedImagem = new Embedded();
		embeddedImagem.setImmediate(false);
		embeddedImagem.setWidth("50px");
		embeddedImagem.setHeight("50px");
		embeddedImagem.setSource(new ThemeResource(
				"img/component/embedded_icon.png"));
		embeddedImagem.setType(1);
		embeddedImagem.setMimeType("image/png");
		mainLayout.addComponent(embeddedImagem);
		
		// verticalLayoutInterno
		verticalLayoutInterno = buildVerticalLayoutInterno();
		mainLayout.addComponent(verticalLayoutInterno);
		mainLayout.setExpandRatio(verticalLayoutInterno, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayoutInterno() {
		// common part: create layout
		verticalLayoutInterno = new VerticalLayout();
		verticalLayoutInterno.setImmediate(false);
		verticalLayoutInterno.setWidth("100.0%");
		verticalLayoutInterno.setHeight("100.0%");
		verticalLayoutInterno.setMargin(false);
		
		// horizontalLayoutNomeHora
		horizontalLayoutNomeHora = buildHorizontalLayoutNomeHora();
		verticalLayoutInterno.addComponent(horizontalLayoutNomeHora);
		
		// textAreaTexto
		textAreaTexto = new TextArea();
		textAreaTexto.setImmediate(false);
		textAreaTexto.setWidth("100.0%");
		textAreaTexto.setHeight("40px");
		verticalLayoutInterno.addComponent(textAreaTexto);
		
		return verticalLayoutInterno;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutNomeHora() {
		// common part: create layout
		horizontalLayoutNomeHora = new HorizontalLayout();
		horizontalLayoutNomeHora.setImmediate(false);
		horizontalLayoutNomeHora.setWidth("100.0%");
		horizontalLayoutNomeHora.setHeight("-1px");
		horizontalLayoutNomeHora.setMargin(false);
		horizontalLayoutNomeHora.setSpacing(true);
		
		// labelNome
		labelNome = new Label();
		labelNome.setImmediate(false);
		labelNome.setWidth("-1px");
		labelNome.setHeight("-1px");
		labelNome.setValue("Nome");
		horizontalLayoutNomeHora.addComponent(labelNome);
		
		// labelHora
		labelHora = new Label();
		labelHora.setImmediate(false);
		labelHora.setWidth("-1px");
		labelHora.setHeight("-1px");
		labelHora.setValue("Hora");
		horizontalLayoutNomeHora.addComponent(labelHora);
		
		return horizontalLayoutNomeHora;
	}
	
	/**
	 * @return the labelHora
	 */
	public Label getLabelHora() {
		return labelHora;
	}

	/**
	 * @param labelHora the labelHora to set
	 */
	public void setLabelHora(String labelHora) {
		this.labelHora.setValue(twitterHumanFriendlyDate(labelHora));
	}

	/**
	 * @return the labelNome
	 */
	public Label getLabelNome() {
		return labelNome;
	}

	/**
	 * @param labelNome the labelNome to set
	 */
	public void setLabelNome(String labelNome) {
		this.labelNome.setValue(labelNome);
	}

	public TextArea getTexto(){
		return this.textAreaTexto;
	}
	
	public void setTexto(String textArea){
		this.textAreaTexto.setValue(textArea);
	}
	
	/**
	 * @return the embeddedImagem
	 */
	public Embedded getEmbeddedImagem() {
		return embeddedImagem;
	}

	/**
	 * @param embeddedImagem the embeddedImagem to set
	 */
	public void setEmbeddedImagem(String imagem) {
		URL url = null;
		try {
			url = new URL(imagem);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.embeddedImagem.setSource(new ExternalResource(url));
		
	}


	public String twitterHumanFriendlyDate(String dateStr) {
		// parse Twitter date
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"EEE MMM dd HH:mm:ss ZZZZZ yyyy");
		dateFormat.setLenient(false);
		Date created = null;
		try {
			created = dateFormat.parse(dateStr);
		} catch (Exception e) {
			return null;
		}
 
		// today
		Date today = new Date();
 
		// how much time since (ms)
		Long duration = today.getTime() - created.getTime();
 
		int second = 1000;
		int minute = second * 60;
		int hour = minute * 60;
		int day = hour * 24;
 
		if (duration < second * 7) {
			return "right now";
		}
 
		if (duration < minute) {
			int n = (int) Math.floor(duration / second);
			return n + " seconds ago";
		}
 
		if (duration < minute * 2) {
			return "about 1 minute ago";
		}
 
		if (duration < hour) {
			int n = (int) Math.floor(duration / minute);
			return n + " minutes ago";
		}
 
		if (duration < hour * 2) {
			return "about 1 hour ago";
		}
 
		if (duration < day) {
			int n = (int) Math.floor(duration / hour);
			return n + " hours ago";
		}
		if (duration > day && duration < day * 2) {
			return "yesterday";
		}
 
		if (duration < day * 365) {
			int n = (int) Math.floor(duration / day);
			return n + " days ago";
		} else {
			return "over a year ago";
		}
	}
}
